{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"scroll","disambiguator":[14023952275516760275,2617169889375103694]},"crate_root":"/home/argos/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.8.0/src","external_crates":[{"file_name":"/home/argos/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.8.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[714512203731086191,2869256915080255377]}},{"file_name":"/home/argos/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.8.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9464329963319564510,7501656092555883702]}}],"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":20183,"line_start":1,"line_end":528,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7465,"byte_end":7466,"line_start":163,"line_end":163,"column_start":17,"column_end":18},"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7483,"byte_end":7484,"line_start":164,"line_end":164,"column_start":16,"column_end":17},"name":"*","value":"Pread","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7502,"byte_end":7503,"line_start":165,"line_end":165,"column_start":17,"column_end":18},"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7522,"byte_end":7523,"line_start":166,"line_end":166,"column_start":18,"column_end":19},"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7540,"byte_end":7541,"line_start":167,"line_end":167,"column_start":16,"column_end":17},"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7559,"byte_end":7560,"line_start":168,"line_end":168,"column_start":17,"column_end":18},"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":20183,"line_start":1,"line_end":528,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/argos/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.8.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":168},{"krate":0,"index":206},{"krate":0,"index":242},{"krate":0,"index":274},{"krate":0,"index":290},{"krate":0,"index":314},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":394},{"krate":0,"index":396}],"decl_id":null,"docs":" # Scroll","sig":null,"attributes":[{"value":"no_std","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7111,"byte_end":7118,"line_start":139,"line_end":139,"column_start":35,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":8},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ctx","qualname":"::ctx","value":"/home/argos/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.8.0/src/ctx.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":30},{"krate":0,"index":36},{"krate":0,"index":398},{"krate":0,"index":406},{"krate":0,"index":404},{"krate":0,"index":400},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":54},{"krate":0,"index":58},{"krate":0,"index":62},{"krate":0,"index":70},{"krate":0,"index":74},{"krate":0,"index":82},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":410},{"krate":0,"index":414},{"krate":0,"index":422},{"krate":0,"index":426},{"krate":0,"index":434},{"krate":0,"index":438},{"krate":0,"index":446},{"krate":0,"index":450},{"krate":0,"index":458},{"krate":0,"index":462},{"krate":0,"index":470},{"krate":0,"index":474},{"krate":0,"index":482},{"krate":0,"index":486},{"krate":0,"index":494},{"krate":0,"index":498},{"krate":0,"index":506},{"krate":0,"index":510},{"krate":0,"index":518},{"krate":0,"index":522},{"krate":0,"index":530},{"krate":0,"index":534},{"krate":0,"index":542},{"krate":0,"index":546},{"krate":0,"index":554},{"krate":0,"index":558},{"krate":0,"index":566},{"krate":0,"index":570},{"krate":0,"index":578},{"krate":0,"index":582},{"krate":0,"index":590},{"krate":0,"index":594},{"krate":0,"index":98},{"krate":0,"index":602},{"krate":0,"index":606},{"krate":0,"index":614},{"krate":0,"index":618},{"krate":0,"index":626},{"krate":0,"index":630},{"krate":0,"index":638},{"krate":0,"index":642},{"krate":0,"index":650},{"krate":0,"index":654},{"krate":0,"index":662},{"krate":0,"index":666},{"krate":0,"index":674},{"krate":0,"index":678},{"krate":0,"index":686},{"krate":0,"index":690},{"krate":0,"index":698},{"krate":0,"index":702},{"krate":0,"index":710},{"krate":0,"index":714},{"krate":0,"index":100},{"krate":0,"index":722},{"krate":0,"index":726},{"krate":0,"index":734},{"krate":0,"index":738},{"krate":0,"index":102},{"krate":0,"index":110},{"krate":0,"index":118},{"krate":0,"index":126},{"krate":0,"index":134},{"krate":0,"index":746},{"krate":0,"index":752},{"krate":0,"index":758},{"krate":0,"index":764},{"krate":0,"index":770},{"krate":0,"index":776},{"krate":0,"index":782},{"krate":0,"index":788},{"krate":0,"index":794},{"krate":0,"index":800},{"krate":0,"index":806},{"krate":0,"index":812},{"krate":0,"index":136},{"krate":0,"index":140},{"krate":0,"index":148},{"krate":0,"index":156},{"krate":0,"index":160}],"decl_id":null,"docs":" Generic context-aware conversion traits, for automatic _downstream_ extension of `Pread`, et. al","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":24},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":22923,"byte_end":22934,"line_start":57,"line_end":57,"column_start":11,"column_end":22},"name":"MeasureWith","qualname":"::ctx::MeasureWith","value":"MeasureWith<Ctx>","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":28}],"decl_id":null,"docs":" A trait for measuring how large something is; for a byte sequence, it will be its length.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":26},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":22951,"byte_end":22956,"line_start":58,"line_end":58,"column_start":10,"column_end":15},"name":"Units","qualname":"::ctx::MeasureWith::Units","value":"type Units;","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":23025,"byte_end":23037,"line_start":61,"line_end":61,"column_start":8,"column_end":20},"name":"measure_with","qualname":"::ctx::MeasureWith::measure_with","value":"fn (&self, ctx: &Ctx) -> Self::Units","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":" A trait for measuring how large something is; for a byte sequence, it will be its length.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":167},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":23645,"byte_end":23654,"line_start":85,"line_end":85,"column_start":5,"column_end":14},"name":"Delimiter","qualname":"::ctx::StrCtx::Delimiter","value":"StrCtx::Delimiter(u8)","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":171},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":23664,"byte_end":23678,"line_start":86,"line_end":86,"column_start":5,"column_end":19},"name":"DelimiterUntil","qualname":"::ctx::StrCtx::DelimiterUntil","value":"StrCtx::DelimiterUntil(u8, usize)","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":177},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":23695,"byte_end":23701,"line_start":87,"line_end":87,"column_start":5,"column_end":11},"name":"Length","qualname":"::ctx::StrCtx::Length","value":"StrCtx::Length(usize)","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":398},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":23632,"byte_end":23638,"line_start":84,"line_end":84,"column_start":10,"column_end":16},"name":"StrCtx","qualname":"::ctx::StrCtx","value":"StrCtx::{Delimiter, DelimiterUntil, Length}","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":171},{"krate":0,"index":177}],"decl_id":null,"docs":" The parsing context for converting a byte sequence to a `&str`","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":23623,"byte_end":23711,"line_start":84,"line_end":88,"column_start":1,"column_end":2}}]},{"kind":"Const","id":{"krate":0,"index":42},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":23770,"byte_end":23774,"line_start":91,"line_end":91,"column_start":11,"column_end":15},"name":"NULL","qualname":"::ctx::NULL","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" A C-style, null terminator based delimiter\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":44},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":23822,"byte_end":23827,"line_start":93,"line_end":93,"column_start":11,"column_end":16},"name":"SPACE","qualname":"::ctx::SPACE","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" A space-based delimiter\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":23880,"byte_end":23883,"line_start":95,"line_end":95,"column_start":11,"column_end":14},"name":"RET","qualname":"::ctx::RET","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" A newline-based delimiter\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":48},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":23932,"byte_end":23935,"line_start":97,"line_end":97,"column_start":11,"column_end":14},"name":"TAB","qualname":"::ctx::TAB","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" A tab-based delimiter\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":24082,"byte_end":24085,"line_start":107,"line_end":107,"column_start":12,"column_end":15},"name":"len","qualname":"<StrCtx>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":58},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":24347,"byte_end":24354,"line_start":117,"line_end":117,"column_start":11,"column_end":18},"name":"FromCtx","qualname":"::ctx::FromCtx","value":"FromCtx<Ctx: Copy = (), This: ?Sized = [u8]>","parent":null,"children":[{"krate":0,"index":60}],"decl_id":null,"docs":" Reads `Self` from `This` using the context `Ctx`; must _not_ fail\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":24415,"byte_end":24423,"line_start":119,"line_end":119,"column_start":8,"column_end":16},"name":"from_ctx","qualname":"::ctx::FromCtx::from_ctx","value":"fn (this: &This, ctx: Ctx) -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Reads `Self` from `This` using the context `Ctx`; must _not_ fail\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":62},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":24530,"byte_end":24540,"line_start":123,"line_end":123,"column_start":11,"column_end":21},"name":"TryFromCtx","qualname":"::ctx::TryFromCtx","value":"TryFromCtx<'a, Ctx: Copy = (), This: ?Sized = [u8]>","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68}],"decl_id":null,"docs":" Tries to read `Self` from `This` using the context `Ctx`\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":64},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":24616,"byte_end":24621,"line_start":124,"line_end":124,"column_start":10,"column_end":15},"name":"Error","qualname":"::ctx::TryFromCtx::Error","value":"type Error;","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":66},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":24632,"byte_end":24636,"line_start":125,"line_end":125,"column_start":10,"column_end":14},"name":"Size","qualname":"::ctx::TryFromCtx::Size","value":"type Size;","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":24659,"byte_end":24671,"line_start":127,"line_end":127,"column_start":8,"column_end":20},"name":"try_from_ctx","qualname":"::ctx::TryFromCtx::try_from_ctx","value":"fn (from: &'a This, ctx: Ctx) -> Result<(Self, Self::Size), Self::Error>","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Tries to read `Self` from `This` using the context `Ctx`\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":70},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":24809,"byte_end":24816,"line_start":131,"line_end":131,"column_start":11,"column_end":18},"name":"IntoCtx","qualname":"::ctx::IntoCtx","value":"IntoCtx<Ctx: Copy = (), This: ?Sized = [u8]>: Sized","parent":null,"children":[{"krate":0,"index":72}],"decl_id":null,"docs":" Writes `Self` into `This` using the context `Ctx`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":24870,"byte_end":24878,"line_start":132,"line_end":132,"column_start":8,"column_end":16},"name":"into_ctx","qualname":"::ctx::IntoCtx::into_ctx","value":"fn (self, &mut This, ctx: Ctx) -> ()","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":" Writes `Self` into `This` using the context `Ctx`\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":74},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":24982,"byte_end":24992,"line_start":136,"line_end":136,"column_start":11,"column_end":21},"name":"TryIntoCtx","qualname":"::ctx::TryIntoCtx","value":"TryIntoCtx<Ctx: Copy = (), This: ?Sized = [u8]>: Sized","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80}],"decl_id":null,"docs":" Tries to write `Self` into `This` using the context `Ctx`\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":76},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":25048,"byte_end":25053,"line_start":137,"line_end":137,"column_start":10,"column_end":15},"name":"Error","qualname":"::ctx::TryIntoCtx::Error","value":"type Error;","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":78},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":25064,"byte_end":25068,"line_start":138,"line_end":138,"column_start":10,"column_end":14},"name":"Size","qualname":"::ctx::TryIntoCtx::Size","value":"type Size;","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":25077,"byte_end":25089,"line_start":139,"line_end":139,"column_start":8,"column_end":20},"name":"try_into_ctx","qualname":"::ctx::TryIntoCtx::try_into_ctx","value":"fn (self, &mut This, ctx: Ctx) -> Result<Self::Size, Self::Error>","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" Tries to write `Self` into `This` using the context `Ctx`\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":82},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":25593,"byte_end":25601,"line_start":148,"line_end":148,"column_start":11,"column_end":19},"name":"SizeWith","qualname":"::ctx::SizeWith","value":"SizeWith<Ctx = ()>","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":86}],"decl_id":null,"docs":" Gets the size of `Self` with a `Ctx`, and in `Self::Units`. Implementors can then call `Gread` related functions","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":84},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":25623,"byte_end":25628,"line_start":149,"line_end":149,"column_start":10,"column_end":15},"name":"Units","qualname":"::ctx::SizeWith::Units","value":"type Units;","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":25651,"byte_end":25660,"line_start":151,"line_end":151,"column_start":8,"column_end":17},"name":"size_with","qualname":"::ctx::SizeWith::size_with","value":"fn (ctx: &Ctx) -> Self::Units","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Gets the size of `Self` with a `Ctx`, and in `Self::Units`. Implementors can then call `Gread` related functions","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":190},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,114,101,97,100,46,114,115],"byte_start":41009,"byte_end":41014,"line_start":83,"line_end":83,"column_start":11,"column_end":16},"name":"Pread","qualname":"::pread::Pread","value":"Pread<Ctx, E, I = usize>: Index<I> + Index<RangeFrom<I>> + MeasureWith<Ctx, Units = I>","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202}],"decl_id":null,"docs":" A very generic, contextual pread interface in Rust. Allows completely parallelized reads, as `Self` is immutable","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,114,101,97,100,46,114,115],"byte_start":41506,"byte_end":41511,"line_start":96,"line_end":96,"column_start":8,"column_end":13},"name":"pread","qualname":"::pread::Pread::pread","value":"fn <'a, N> (&'a self, offset: I) -> result::Result<N, E>","parent":{"krate":0,"index":190},"children":[],"decl_id":null,"docs":" A very generic, contextual pread interface in Rust. Allows completely parallelized reads, as `Self` is immutable","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,114,101,97,100,46,114,115],"byte_start":42058,"byte_end":42068,"line_start":107,"line_end":107,"column_start":8,"column_end":18},"name":"pread_with","qualname":"::pread::Pread::pread_with","value":"fn <'a, N> (&'a self, offset: I, ctx: Ctx) -> result::Result<N, E>","parent":{"krate":0,"index":190},"children":[],"decl_id":null,"docs":" A very generic, contextual pread interface in Rust. Allows completely parallelized reads, as `Self` is immutable","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,114,101,97,100,46,114,115],"byte_start":42881,"byte_end":42886,"line_start":123,"line_end":123,"column_start":8,"column_end":13},"name":"gread","qualname":"::pread::Pread::gread","value":"fn <'a, N> (&'a self, offset: &mut I) -> result::Result<N, E>","parent":{"krate":0,"index":190},"children":[],"decl_id":null,"docs":" A very generic, contextual pread interface in Rust. Allows completely parallelized reads, as `Self` is immutable","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,114,101,97,100,46,114,115],"byte_start":43566,"byte_end":43576,"line_start":137,"line_end":137,"column_start":8,"column_end":18},"name":"gread_with","qualname":"::pread::Pread::gread_with","value":"fn <'a, N> (&'a self, offset: &mut I, ctx: Ctx) -> result::Result<N, E>","parent":{"krate":0,"index":190},"children":[],"decl_id":null,"docs":" A very generic, contextual pread interface in Rust. Allows completely parallelized reads, as `Self` is immutable","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,114,101,97,100,46,114,115],"byte_start":44715,"byte_end":44726,"line_start":168,"line_end":168,"column_start":8,"column_end":19},"name":"gread_inout","qualname":"::pread::Pread::gread_inout","value":"fn <'a, N> (&'a self, offset: &mut I, inout: &mut [N]) -> result::Result<(), E>","parent":{"krate":0,"index":190},"children":[],"decl_id":null,"docs":" A very generic, contextual pread interface in Rust. Allows completely parallelized reads, as `Self` is immutable","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,114,101,97,100,46,114,115],"byte_start":45603,"byte_end":45619,"line_start":193,"line_end":193,"column_start":8,"column_end":24},"name":"gread_inout_with","qualname":"::pread::Pread::gread_inout_with","value":"fn <'a, N> (&'a self, offset: &mut I, inout: &mut [N], ctx: Ctx) -> result::Result<(), E>","parent":{"krate":0,"index":190},"children":[],"decl_id":null,"docs":" A very generic, contextual pread interface in Rust. Allows completely parallelized reads, as `Self` is immutable","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":230},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,119,114,105,116,101,46,114,115],"byte_start":47518,"byte_end":47524,"line_start":33,"line_end":33,"column_start":11,"column_end":17},"name":"Pwrite","qualname":"::pwrite::Pwrite","value":"Pwrite<Ctx, E, I = usize>: Index<I> + IndexMut<RangeFrom<I>> + MeasureWith<Ctx, Units = I>","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238}],"decl_id":null,"docs":" Writes into `Self` at an offset of type `I` using a `Ctx`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,119,114,105,116,101,46,114,115],"byte_start":47712,"byte_end":47718,"line_start":39,"line_end":39,"column_start":8,"column_end":14},"name":"pwrite","qualname":"::pwrite::Pwrite::pwrite","value":"fn <N> (&mut self, n: N, offset: I) -> result::Result<I, E>","parent":{"krate":0,"index":230},"children":[],"decl_id":null,"docs":" Writes into `Self` at an offset of type `I` using a `Ctx`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,119,114,105,116,101,46,114,115],"byte_start":48253,"byte_end":48264,"line_start":49,"line_end":49,"column_start":8,"column_end":19},"name":"pwrite_with","qualname":"::pwrite::Pwrite::pwrite_with","value":"fn <N> (&mut self, n: N, offset: I, ctx: Ctx) -> result::Result<I, E>","parent":{"krate":0,"index":230},"children":[],"decl_id":null,"docs":" Writes into `Self` at an offset of type `I` using a `Ctx`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,119,114,105,116,101,46,114,115],"byte_start":48736,"byte_end":48742,"line_start":59,"line_end":59,"column_start":8,"column_end":14},"name":"gwrite","qualname":"::pwrite::Pwrite::gwrite","value":"fn <N> (&mut self, n: N, offset: &mut I) -> result::Result<I, E>","parent":{"krate":0,"index":230},"children":[],"decl_id":null,"docs":" Writes into `Self` at an offset of type `I` using a `Ctx`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,119,114,105,116,101,46,114,115],"byte_start":49113,"byte_end":49124,"line_start":67,"line_end":67,"column_start":8,"column_end":19},"name":"gwrite_with","qualname":"::pwrite::Pwrite::gwrite_with","value":"fn <N> (&mut self, n: N, offset: &mut I, ctx: Ctx) -> result::Result<I, E>","parent":{"krate":0,"index":230},"children":[],"decl_id":null,"docs":" Writes into `Self` at an offset of type `I` using a `Ctx`","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":258},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,103,114,101,97,116,101,114,46,114,115],"byte_start":50670,"byte_end":50675,"line_start":32,"line_end":32,"column_start":11,"column_end":16},"name":"Cread","qualname":"::greater::Cread","value":"Cread<Ctx, I = usize>: Index<I> + Index<RangeFrom<I>>","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":262}],"decl_id":null,"docs":" Core-read - core, no_std friendly trait for reading basic traits from byte buffers. Cannot fail unless the buffer is too small, in which case an assert fires and the program panics.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,103,114,101,97,116,101,114,46,114,115],"byte_start":51304,"byte_end":51314,"line_start":52,"line_end":52,"column_start":8,"column_end":18},"name":"cread_with","qualname":"::greater::Cread::cread_with","value":"fn <'a, N> (&'a self, offset: I, ctx: Ctx) -> N","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Core-read - core, no_std friendly trait for reading basic traits from byte buffers. Cannot fail unless the buffer is too small, in which case an assert fires and the program panics.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,103,114,101,97,116,101,114,46,114,115],"byte_start":52260,"byte_end":52265,"line_start":78,"line_end":78,"column_start":8,"column_end":13},"name":"cread","qualname":"::greater::Cread::cread","value":"fn <'a, N> (&'a self, offset: I) -> N","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Core-read - core, no_std friendly trait for reading basic traits from byte buffers. Cannot fail unless the buffer is too small, in which case an assert fires and the program panics.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":266},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,103,114,101,97,116,101,114,46,114,115],"byte_start":53416,"byte_end":53422,"line_start":112,"line_end":112,"column_start":11,"column_end":17},"name":"Cwrite","qualname":"::greater::Cwrite","value":"Cwrite<Ctx: Copy, I = usize>: Index<I> + IndexMut<RangeFrom<I>>","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":270}],"decl_id":null,"docs":" Core-write - core, no_std friendly trait for writing basic types into byte buffers. Cannot fail unless the buffer is too small, in which case an assert fires and the program panics.\n Similar to [Cread](trait.Cread.html), if your type implements [IntoCtx](trait.IntoCtx.html) then you can `cwrite(your_type, offset)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,103,114,101,97,116,101,114,46,114,115],"byte_start":53960,"byte_end":53966,"line_start":127,"line_end":127,"column_start":8,"column_end":14},"name":"cwrite","qualname":"::greater::Cwrite::cwrite","value":"fn <N> (&mut self, n: N, offset: I) -> ()","parent":{"krate":0,"index":266},"children":[],"decl_id":null,"docs":" Core-write - core, no_std friendly trait for writing basic types into byte buffers. Cannot fail unless the buffer is too small, in which case an assert fires and the program panics.\n Similar to [Cread](trait.Cread.html), if your type implements [IntoCtx](trait.IntoCtx.html) then you can `cwrite(your_type, offset)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,103,114,101,97,116,101,114,46,114,115],"byte_start":54583,"byte_end":54594,"line_start":143,"line_end":143,"column_start":8,"column_end":19},"name":"cwrite_with","qualname":"::greater::Cwrite::cwrite_with","value":"fn <N> (&mut self, n: N, offset: I, ctx: Ctx) -> ()","parent":{"krate":0,"index":266},"children":[],"decl_id":null,"docs":" Core-write - core, no_std friendly trait for writing basic types into byte buffers. Cannot fail unless the buffer is too small, in which case an assert fires and the program panics.\n Similar to [Cread](trait.Cread.html), if your type implements [IntoCtx](trait.IntoCtx.html) then you can `cwrite(your_type, offset)`.","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":305},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":55092,"byte_end":55098,"line_start":13,"line_end":13,"column_start":5,"column_end":11},"name":"TooBig","qualname":"::error::Error::TooBig","value":"Error::TooBig { size, len }","parent":{"krate":0,"index":818},"children":[],"decl_id":null,"docs":" The type you tried to read was too big\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":311},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":55181,"byte_end":55190,"line_start":15,"line_end":15,"column_start":5,"column_end":14},"name":"BadOffset","qualname":"::error::Error::BadOffset","value":"Error::BadOffset(T)","parent":{"krate":0,"index":818},"children":[],"decl_id":null,"docs":" The requested offset to read/write at is invalid\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":315},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":55199,"byte_end":55207,"line_start":16,"line_end":16,"column_start":5,"column_end":13},"name":"BadInput","qualname":"::error::Error::BadInput","value":"Error::BadInput { size, msg }","parent":{"krate":0,"index":818},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":818},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":55022,"byte_end":55027,"line_start":11,"line_end":11,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{TooBig, BadOffset, BadInput}","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":311},{"krate":0,"index":315}],"decl_id":null,"docs":" A custom Scroll error\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":288},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":56891,"byte_end":56897,"line_start":68,"line_end":68,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":325},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,110,100,105,97,110,46,114,115],"byte_start":57050,"byte_end":57056,"line_start":4,"line_end":4,"column_start":5,"column_end":11},"name":"Little","qualname":"::endian::Endian::Little","value":"Endian::Little","parent":{"krate":0,"index":824},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":327},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,110,100,105,97,110,46,114,115],"byte_start":57062,"byte_end":57065,"line_start":5,"line_end":5,"column_start":5,"column_end":8},"name":"Big","qualname":"::endian::Endian::Big","value":"Endian::Big","parent":{"krate":0,"index":824},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":824},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,110,100,105,97,110,46,114,115],"byte_start":57037,"byte_end":57043,"line_start":3,"line_end":3,"column_start":10,"column_end":16},"name":"Endian","qualname":"::endian::Endian","value":"Endian::{Little, Big}","parent":null,"children":[{"krate":0,"index":325},{"krate":0,"index":327}],"decl_id":null,"docs":" The endianness (byte order) of a stream of bytes\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,110,100,105,97,110,46,114,115],"byte_start":57028,"byte_end":57068,"line_start":3,"line_end":6,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,110,100,105,97,110,46,114,115],"byte_start":57028,"byte_end":57068,"line_start":3,"line_end":6,"column_start":1,"column_end":2}}]},{"kind":"Const","id":{"krate":0,"index":292},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,110,100,105,97,110,46,114,115],"byte_start":57117,"byte_end":57119,"line_start":9,"line_end":9,"column_start":11,"column_end":13},"name":"LE","qualname":"::endian::LE","value":"Endian","parent":null,"children":[],"decl_id":null,"docs":" Little Endian byte order context\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":294},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,110,100,105,97,110,46,114,115],"byte_start":57190,"byte_end":57192,"line_start":11,"line_end":11,"column_start":11,"column_end":13},"name":"BE","qualname":"::endian::BE","value":"Endian","parent":null,"children":[],"decl_id":null,"docs":" Big Endian byte order context\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":296},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,110,100,105,97,110,46,114,115],"byte_start":57257,"byte_end":57264,"line_start":13,"line_end":13,"column_start":11,"column_end":18},"name":"NETWORK","qualname":"::endian::NETWORK","value":"Endian","parent":null,"children":[],"decl_id":null,"docs":" Network byte order context\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":298},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,110,100,105,97,110,46,114,115],"byte_start":57367,"byte_end":57373,"line_start":16,"line_end":16,"column_start":11,"column_end":17},"name":"NATIVE","qualname":"::endian::NATIVE","value":"Endian","parent":null,"children":[],"decl_id":null,"docs":" The machine's native byte order\n","sig":null,"attributes":[{"value":"cfg(target_endian = \"little\")","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,110,100,105,97,110,46,114,115],"byte_start":57288,"byte_end":57320,"line_start":14,"line_end":14,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,110,100,105,97,110,46,114,115],"byte_start":57755,"byte_end":57762,"line_start":37,"line_end":37,"column_start":12,"column_end":19},"name":"network","qualname":"<Endian>::network","value":"fn () -> Endian","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,110,100,105,97,110,46,114,115],"byte_start":57824,"byte_end":57833,"line_start":41,"line_end":41,"column_start":12,"column_end":21},"name":"is_little","qualname":"<Endian>::is_little","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":844},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,101,98,49,50,56,46,114,115],"byte_start":58134,"byte_end":58141,"line_start":10,"line_end":10,"column_start":12,"column_end":19},"name":"Uleb128","qualname":"::leb128::Uleb128","value":"Uleb128 {  }","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":331}],"decl_id":null,"docs":" An unsigned leb128 integer\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,101,98,49,50,56,46,114,115],"byte_start":58123,"byte_end":58179,"line_start":10,"line_end":13,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,101,98,49,50,56,46,114,115],"byte_start":58283,"byte_end":58287,"line_start":18,"line_end":18,"column_start":12,"column_end":16},"name":"size","qualname":"<Uleb128>::size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,101,98,49,50,56,46,114,115],"byte_start":58416,"byte_end":58420,"line_start":23,"line_end":23,"column_start":12,"column_end":16},"name":"read","qualname":"<Uleb128>::read","value":"fn (bytes: &[u8], offset: &mut usize) -> error::Result<u64>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":862},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,101,98,49,50,56,46,114,115],"byte_start":58887,"byte_end":58894,"line_start":45,"line_end":45,"column_start":12,"column_end":19},"name":"Sleb128","qualname":"::leb128::Sleb128","value":"Sleb128 {  }","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":335}],"decl_id":null,"docs":" An signed leb128 integer\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,101,98,49,50,56,46,114,115],"byte_start":58876,"byte_end":58932,"line_start":45,"line_end":48,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,101,98,49,50,56,46,114,115],"byte_start":59036,"byte_end":59040,"line_start":53,"line_end":53,"column_start":12,"column_end":16},"name":"size","qualname":"<Sleb128>::size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,101,98,49,50,56,46,114,115],"byte_start":59169,"byte_end":59173,"line_start":58,"line_end":58,"column_start":12,"column_end":16},"name":"read","qualname":"<Sleb128>::read","value":"fn (bytes: &[u8], offset: &mut usize) -> error::Result<i64>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":23282,"byte_end":23283,"line_start":72,"line_end":72,"column_start":48,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":23966,"byte_end":23972,"line_start":99,"line_end":99,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":24062,"byte_end":24068,"line_start":106,"line_end":106,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,114,101,97,100,46,114,115],"byte_start":46214,"byte_end":46215,"line_start":211,"line_end":211,"column_start":26,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,119,114,105,116,101,46,114,115],"byte_start":49704,"byte_end":49705,"line_start":85,"line_end":85,"column_start":27,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,103,114,101,97,116,101,114,46,114,115],"byte_start":52539,"byte_end":52540,"line_start":84,"line_end":84,"column_start":82,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,103,114,101,97,116,101,114,46,114,115],"byte_start":54835,"byte_end":54836,"line_start":148,"line_end":148,"column_start":86,"column_end":87},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":56272,"byte_end":56277,"line_start":54,"line_end":54,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,110,100,105,97,110,46,114,115],"byte_start":57503,"byte_end":57509,"line_start":21,"line_end":21,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,110,100,105,97,110,46,114,115],"byte_start":57597,"byte_end":57603,"line_start":28,"line_end":28,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,110,100,105,97,110,46,114,115],"byte_start":57721,"byte_end":57727,"line_start":35,"line_end":35,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,101,98,49,50,56,46,114,115],"byte_start":58186,"byte_end":58193,"line_start":15,"line_end":15,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,101,98,49,50,56,46,114,115],"byte_start":58623,"byte_end":58630,"line_start":30,"line_end":30,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,101,98,49,50,56,46,114,115],"byte_start":58939,"byte_end":58946,"line_start":50,"line_end":50,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":348},{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,101,98,49,50,56,46,114,115],"byte_start":59395,"byte_end":59402,"line_start":66,"line_end":66,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,101,98,49,50,56,46,114,115],"byte_start":59978,"byte_end":59985,"line_start":94,"line_end":94,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":372},{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,101,98,49,50,56,46,114,115],"byte_start":60827,"byte_end":60834,"line_start":123,"line_end":123,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7336,"byte_end":7339,"line_start":153,"line_end":153,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":8}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":23282,"byte_end":23283,"line_start":72,"line_end":72,"column_start":48,"column_end":49},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":25},"to":{"krate":0,"index":24}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":23966,"byte_end":23972,"line_start":99,"line_end":99,"column_start":18,"column_end":24},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":398},"to":{"krate":1,"index":2630}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":24062,"byte_end":24068,"line_start":106,"line_end":106,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":398},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":24855,"byte_end":24860,"line_start":131,"line_end":131,"column_start":57,"column_end":62},"kind":"SuperTrait","from":{"krate":1,"index":1780},"to":{"krate":0,"index":70}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,99,116,120,46,114,115],"byte_start":25031,"byte_end":25036,"line_start":136,"line_end":136,"column_start":60,"column_end":65},"kind":"SuperTrait","from":{"krate":1,"index":1780},"to":{"krate":0,"index":74}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,114,101,97,100,46,114,115],"byte_start":41036,"byte_end":41041,"line_start":83,"line_end":83,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":1,"index":2106},"to":{"krate":0,"index":190}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,114,101,97,100,46,114,115],"byte_start":41047,"byte_end":41052,"line_start":83,"line_end":83,"column_start":49,"column_end":54},"kind":"SuperTrait","from":{"krate":1,"index":2106},"to":{"krate":0,"index":190}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,114,101,97,100,46,114,115],"byte_start":41069,"byte_end":41080,"line_start":83,"line_end":83,"column_start":71,"column_end":82},"kind":"SuperTrait","from":{"krate":0,"index":24},"to":{"krate":0,"index":190}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,114,101,97,100,46,114,115],"byte_start":46214,"byte_end":46215,"line_start":211,"line_end":211,"column_start":26,"column_end":27},"kind":{"variant":"Impl","fields":[75]},"from":{"krate":0,"index":105},"to":{"krate":0,"index":190}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,119,114,105,116,101,46,114,115],"byte_start":47546,"byte_end":47551,"line_start":33,"line_end":33,"column_start":39,"column_end":44},"kind":"SuperTrait","from":{"krate":1,"index":2106},"to":{"krate":0,"index":230}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,119,114,105,116,101,46,114,115],"byte_start":47557,"byte_end":47565,"line_start":33,"line_end":33,"column_start":50,"column_end":58},"kind":"SuperTrait","from":{"krate":1,"index":2112},"to":{"krate":0,"index":230}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,119,114,105,116,101,46,114,115],"byte_start":47582,"byte_end":47593,"line_start":33,"line_end":33,"column_start":75,"column_end":86},"kind":"SuperTrait","from":{"krate":0,"index":24},"to":{"krate":0,"index":230}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,112,119,114,105,116,101,46,114,115],"byte_start":49704,"byte_end":49705,"line_start":85,"line_end":85,"column_start":27,"column_end":28},"kind":{"variant":"Impl","fields":[76]},"from":{"krate":0,"index":127},"to":{"krate":0,"index":230}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,103,114,101,97,116,101,114,46,114,115],"byte_start":50694,"byte_end":50699,"line_start":32,"line_end":32,"column_start":35,"column_end":40},"kind":"SuperTrait","from":{"krate":1,"index":2106},"to":{"krate":0,"index":258}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,103,114,101,97,116,101,114,46,114,115],"byte_start":50705,"byte_end":50710,"line_start":32,"line_end":32,"column_start":46,"column_end":51},"kind":"SuperTrait","from":{"krate":1,"index":2106},"to":{"krate":0,"index":258}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,103,114,101,97,116,101,114,46,114,115],"byte_start":52539,"byte_end":52540,"line_start":84,"line_end":84,"column_start":82,"column_end":83},"kind":{"variant":"Impl","fields":[77]},"from":{"krate":0,"index":145},"to":{"krate":0,"index":258}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,103,114,101,97,116,101,114,46,114,115],"byte_start":53446,"byte_end":53451,"line_start":112,"line_end":112,"column_start":41,"column_end":46},"kind":"SuperTrait","from":{"krate":1,"index":2106},"to":{"krate":0,"index":266}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,103,114,101,97,116,101,114,46,114,115],"byte_start":53457,"byte_end":53465,"line_start":112,"line_end":112,"column_start":52,"column_end":60},"kind":"SuperTrait","from":{"krate":1,"index":2112},"to":{"krate":0,"index":266}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,103,114,101,97,116,101,114,46,114,115],"byte_start":54835,"byte_end":54836,"line_start":148,"line_end":148,"column_start":86,"column_end":87},"kind":{"variant":"Impl","fields":[78]},"from":{"krate":0,"index":159},"to":{"krate":0,"index":266}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":56272,"byte_end":56277,"line_start":54,"line_end":54,"column_start":18,"column_end":23},"kind":{"variant":"Impl","fields":[79]},"from":{"krate":0,"index":818},"to":{"krate":1,"index":7872}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,110,100,105,97,110,46,114,115],"byte_start":57503,"byte_end":57509,"line_start":21,"line_end":21,"column_start":18,"column_end":24},"kind":{"variant":"Impl","fields":[80]},"from":{"krate":0,"index":824},"to":{"krate":1,"index":2630}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,110,100,105,97,110,46,114,115],"byte_start":57597,"byte_end":57603,"line_start":28,"line_end":28,"column_start":21,"column_end":27},"kind":{"variant":"Impl","fields":[81]},"from":{"krate":0,"index":824},"to":{"krate":1,"index":2650}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,101,110,100,105,97,110,46,114,115],"byte_start":57721,"byte_end":57727,"line_start":35,"line_end":35,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[82]},"from":{"krate":0,"index":824},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,101,98,49,50,56,46,114,115],"byte_start":58186,"byte_end":58193,"line_start":15,"line_end":15,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[83]},"from":{"krate":0,"index":844},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,101,98,49,50,56,46,114,115],"byte_start":58623,"byte_end":58630,"line_start":30,"line_end":30,"column_start":21,"column_end":28},"kind":{"variant":"Impl","fields":[84]},"from":{"krate":0,"index":844},"to":{"krate":1,"index":2638}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,101,98,49,50,56,46,114,115],"byte_start":58939,"byte_end":58946,"line_start":50,"line_end":50,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[86]},"from":{"krate":0,"index":862},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,101,98,49,50,56,46,114,115],"byte_start":59395,"byte_end":59402,"line_start":66,"line_end":66,"column_start":21,"column_end":28},"kind":{"variant":"Impl","fields":[87]},"from":{"krate":0,"index":862},"to":{"krate":1,"index":2638}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,101,98,49,50,56,46,114,115],"byte_start":59978,"byte_end":59985,"line_start":94,"line_end":94,"column_start":29,"column_end":36},"kind":{"variant":"Impl","fields":[89]},"from":{"krate":0,"index":844},"to":{"krate":0,"index":62}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,99,114,111,108,108,45,48,46,56,46,48,47,115,114,99,47,108,101,98,49,50,56,46,114,115],"byte_start":60827,"byte_end":60834,"line_start":123,"line_end":123,"column_start":29,"column_end":36},"kind":{"variant":"Impl","fields":[90]},"from":{"krate":0,"index":862},"to":{"krate":0,"index":62}}]}