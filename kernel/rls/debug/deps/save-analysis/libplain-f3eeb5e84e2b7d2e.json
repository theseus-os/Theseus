{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"plain","disambiguator":[2531568778794832875,14485220946473250804]},"crate_root":"/home/argos/.cargo/registry/src/github.com-1ecc6299db9ec823/plain-0.2.3/src","external_crates":[{"file_name":"/home/argos/.cargo/registry/src/github.com-1ecc6299db9ec823/plain-0.2.3/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[714512203731086191,2869256915080255377]}},{"file_name":"/home/argos/.cargo/registry/src/github.com-1ecc6299db9ec823/plain-0.2.3/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9464329963319564510,7501656092555883702]}}],"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":5227,"line_start":1,"line_end":158,"column_start":1,"column_end":11}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":116},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4879,"byte_end":4884,"line_start":143,"line_end":143,"column_start":16,"column_end":21},"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":16},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4913,"byte_end":4918,"line_start":146,"line_end":146,"column_start":16,"column_end":21},"name":"Plain","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":76},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4952,"byte_end":4960,"line_start":149,"line_end":149,"column_start":19,"column_end":27},"name":"as_bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":78},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4962,"byte_end":4974,"line_start":149,"line_end":149,"column_start":29,"column_end":41},"name":"as_mut_bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4976,"byte_end":4991,"line_start":149,"line_end":149,"column_start":43,"column_end":58},"name":"copy_from_bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":80},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4993,"byte_end":5003,"line_start":149,"line_end":149,"column_start":60,"column_end":70},"name":"from_bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":86},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5005,"byte_end":5019,"line_start":149,"line_end":149,"column_start":72,"column_end":86},"name":"from_mut_bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":70},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5021,"byte_end":5031,"line_start":149,"line_end":149,"column_start":88,"column_end":98},"name":"is_aligned","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":82},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5051,"byte_end":5067,"line_start":150,"line_end":150,"column_start":19,"column_end":35},"name":"slice_from_bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":84},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5069,"byte_end":5089,"line_start":150,"line_end":150,"column_start":37,"column_end":57},"name":"slice_from_bytes_len","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":88},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5091,"byte_end":5111,"line_start":150,"line_end":150,"column_start":59,"column_end":79},"name":"slice_from_mut_bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":90},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5131,"byte_end":5155,"line_start":151,"line_end":151,"column_start":19,"column_end":43},"name":"slice_from_mut_bytes_len","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":5227,"line_start":1,"line_end":158,"column_start":1,"column_end":11},"name":"","qualname":"::","value":"/home/argos/.cargo/registry/src/github.com-1ecc6299db9ec823/plain-0.2.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":94}],"decl_id":null,"docs":" A small Rust library that allows users to interpret arrays of bytes\n as certain kinds of structures safely.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4841,"byte_end":4851,"line_start":140,"line_end":140,"column_start":1,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":45},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":5296,"byte_end":5304,"line_start":4,"line_end":4,"column_start":5,"column_end":13},"name":"TooShort","qualname":"::error::Error::TooShort","value":"Error::TooShort","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":47},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":5310,"byte_end":5322,"line_start":5,"line_end":5,"column_start":5,"column_end":17},"name":"BadAlignment","qualname":"::error::Error::BadAlignment","value":"Error::BadAlignment","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":116},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":5284,"byte_end":5289,"line_start":3,"line_end":3,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{TooShort, BadAlignment}","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":47}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":5275,"byte_end":5325,"line_start":3,"line_end":6,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":5275,"byte_end":5325,"line_start":3,"line_end":6,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":16},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,112,108,97,105,110,46,114,115],"byte_start":6322,"byte_end":6327,"line_start":25,"line_end":25,"column_start":18,"column_end":23},"name":"Plain","qualname":"::plain::Plain","value":"Plain","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30}],"decl_id":null,"docs":" A trait for plain data types that can be safely read from a byte slice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,112,108,97,105,110,46,114,115],"byte_start":6359,"byte_end":6369,"line_start":27,"line_end":27,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::plain::Plain::from_bytes","value":"fn (bytes: &[u8]) -> Result<&Self, Error>","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" A trait for plain data types that can be safely read from a byte slice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,112,108,97,105,110,46,114,115],"byte_start":6509,"byte_end":6525,"line_start":35,"line_end":35,"column_start":8,"column_end":24},"name":"slice_from_bytes","qualname":"::plain::Plain::slice_from_bytes","value":"fn (bytes: &[u8]) -> Result<&[Self], Error>","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" A trait for plain data types that can be safely read from a byte slice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,112,108,97,105,110,46,114,115],"byte_start":6673,"byte_end":6693,"line_start":43,"line_end":43,"column_start":8,"column_end":28},"name":"slice_from_bytes_len","qualname":"::plain::Plain::slice_from_bytes_len","value":"fn (bytes: &[u8], len: usize) -> Result<&[Self], Error>","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" A trait for plain data types that can be safely read from a byte slice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,112,108,97,105,110,46,114,115],"byte_start":6862,"byte_end":6876,"line_start":51,"line_end":51,"column_start":8,"column_end":22},"name":"from_mut_bytes","qualname":"::plain::Plain::from_mut_bytes","value":"fn (bytes: &mut [u8]) -> Result<&mut Self, Error>","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" A trait for plain data types that can be safely read from a byte slice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,112,108,97,105,110,46,114,115],"byte_start":7028,"byte_end":7048,"line_start":59,"line_end":59,"column_start":8,"column_end":28},"name":"slice_from_mut_bytes","qualname":"::plain::Plain::slice_from_mut_bytes","value":"fn (bytes: &mut [u8]) -> Result<&mut [Self], Error>","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" A trait for plain data types that can be safely read from a byte slice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,112,108,97,105,110,46,114,115],"byte_start":7208,"byte_end":7232,"line_start":67,"line_end":67,"column_start":8,"column_end":32},"name":"slice_from_mut_bytes_len","qualname":"::plain::Plain::slice_from_mut_bytes_len","value":"fn (bytes: &mut [u8], len: usize) -> Result<&mut [Self], Error>","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" A trait for plain data types that can be safely read from a byte slice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,112,108,97,105,110,46,114,115],"byte_start":7413,"byte_end":7428,"line_start":75,"line_end":75,"column_start":8,"column_end":23},"name":"copy_from_bytes","qualname":"::plain::Plain::copy_from_bytes","value":"fn (&mut self, bytes: &[u8]) -> Result<(), Error>","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" A trait for plain data types that can be safely read from a byte slice.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":70},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,109,101,116,104,111,100,115,46,114,115],"byte_start":7995,"byte_end":8005,"line_start":8,"line_end":8,"column_start":8,"column_end":18},"name":"is_aligned","qualname":"::methods::is_aligned","value":"fn <T> (bytes: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a byte slice is aligned suitably for type T.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,109,101,116,104,111,100,115,46,114,115],"byte_start":7978,"byte_end":7987,"line_start":7,"line_end":7,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":76},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,109,101,116,104,111,100,115,46,114,115],"byte_start":8598,"byte_end":8606,"line_start":32,"line_end":32,"column_start":15,"column_end":23},"name":"as_bytes","qualname":"::methods::as_bytes","value":"fn <S> (s: &S) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Interpret data as bytes. Not safe for data with padding.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,109,101,116,104,111,100,115,46,114,115],"byte_start":8566,"byte_end":8583,"line_start":31,"line_end":31,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":78},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,109,101,116,104,111,100,115,46,114,115],"byte_start":8902,"byte_end":8914,"line_start":44,"line_end":44,"column_start":15,"column_end":27},"name":"as_mut_bytes","qualname":"::methods::as_mut_bytes","value":"fn <S> (s: &mut S) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Interpret data as mutable bytes.\n Reading is not safe for data with padding. Writing is ok.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,109,101,116,104,111,100,115,46,114,115],"byte_start":8870,"byte_end":8887,"line_start":43,"line_end":43,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":80},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,109,101,116,104,111,100,115,46,114,115],"byte_start":9769,"byte_end":9779,"line_start":72,"line_end":72,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::methods::from_bytes","value":"fn <T> (bytes: &[u8]) -> Result<&T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Safely converts a byte slice to a reference.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,109,101,116,104,111,100,115,46,114,115],"byte_start":9752,"byte_end":9761,"line_start":71,"line_end":71,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":82},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,109,101,116,104,111,100,115,46,114,115],"byte_start":10978,"byte_end":10994,"line_start":106,"line_end":106,"column_start":8,"column_end":24},"name":"slice_from_bytes","qualname":"::methods::slice_from_bytes","value":"fn <T> (bytes: &[u8]) -> Result<&[T], Error>","parent":null,"children":[],"decl_id":null,"docs":" Similar to [`from_bytes()`](fn.from_bytes.html),\n except that the output is a slice of T, instead\n of a reference to a single T. All concerns about\n alignment also apply here, but size is handled\n differently.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,109,101,116,104,111,100,115,46,114,115],"byte_start":10961,"byte_end":10970,"line_start":105,"line_end":105,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":84},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,109,101,116,104,111,100,115,46,114,115],"byte_start":11421,"byte_end":11441,"line_start":122,"line_end":122,"column_start":8,"column_end":28},"name":"slice_from_bytes_len","qualname":"::methods::slice_from_bytes_len","value":"fn <T> (bytes: &[u8], len: usize) -> Result<&[T], Error>","parent":null,"children":[],"decl_id":null,"docs":" Same as [`slice_from_bytes()`](fn.slice_from_bytes.html),\n except that it takes explicit length of the result slice.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,109,101,116,104,111,100,115,46,114,115],"byte_start":11404,"byte_end":11413,"line_start":121,"line_end":121,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":86},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,109,101,116,104,111,100,115,46,114,115],"byte_start":11807,"byte_end":11821,"line_start":138,"line_end":138,"column_start":8,"column_end":22},"name":"from_mut_bytes","qualname":"::methods::from_mut_bytes","value":"fn <T> (bytes: &mut [u8]) -> Result<&mut T, Error>","parent":null,"children":[],"decl_id":null,"docs":" See [`from_bytes()`](fn.from_bytes.html).","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,109,101,116,104,111,100,115,46,114,115],"byte_start":11790,"byte_end":11799,"line_start":137,"line_end":137,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,109,101,116,104,111,100,115,46,114,115],"byte_start":12161,"byte_end":12181,"line_start":152,"line_end":152,"column_start":8,"column_end":28},"name":"slice_from_mut_bytes","qualname":"::methods::slice_from_mut_bytes","value":"fn <T> (bytes: &mut [u8]) -> Result<&mut [T], Error>","parent":null,"children":[],"decl_id":null,"docs":" See [`slice_from_bytes()`](fn.slice_from_bytes.html).","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,109,101,116,104,111,100,115,46,114,115],"byte_start":12144,"byte_end":12153,"line_start":151,"line_end":151,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,109,101,116,104,111,100,115,46,114,115],"byte_start":12487,"byte_end":12511,"line_start":165,"line_end":165,"column_start":8,"column_end":32},"name":"slice_from_mut_bytes_len","qualname":"::methods::slice_from_mut_bytes_len","value":"fn <T> (bytes: &mut [u8], len: usize) -> Result<&mut [T], Error>","parent":null,"children":[],"decl_id":null,"docs":" See [`slice_from_bytes_len()`](fn.slice_from_bytes_len.html).","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,109,101,116,104,111,100,115,46,114,115],"byte_start":12470,"byte_end":12479,"line_start":164,"line_end":164,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,109,101,116,104,111,100,115,46,114,115],"byte_start":13042,"byte_end":13057,"line_start":183,"line_end":183,"column_start":8,"column_end":23},"name":"copy_from_bytes","qualname":"::methods::copy_from_bytes","value":"fn <T> (into: &mut T, bytes: &[u8]) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Copies data from a byte slice into existing memory.\n Suitable when [`from_bytes()`](fn.from_bytes.html) would normally\n be used, but the data is not aligned properly in memory.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,108,97,105,110,45,48,46,50,46,51,47,115,114,99,47,109,101,116,104,111,100,115,46,114,115],"byte_start":13025,"byte_end":13034,"line_start":182,"line_end":182,"column_start":1,"column_end":10}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}