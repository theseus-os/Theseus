{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"port_io","disambiguator":[7544509917493940394,14309789599353075091]},"crate_root":"/home/argos/Theseus/libs/port_io/src","external_crates":[{"file_name":"/home/argos/Theseus/libs/port_io/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[714512203731086191,2869256915080255377]}},{"file_name":"/home/argos/Theseus/libs/port_io/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9464329963319564510,7501656092555883702]}}],"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":2320,"line_start":1,"line_end":75,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":26},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,108,105,98,46,114,115],"byte_start":246,"byte_end":249,"line_start":10,"line_end":10,"column_start":15,"column_end":18},"name":"inb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":28},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,108,105,98,46,114,115],"byte_start":251,"byte_end":255,"line_start":10,"line_end":10,"column_start":20,"column_end":24},"name":"outb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":30},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,108,105,98,46,114,115],"byte_start":257,"byte_end":260,"line_start":10,"line_end":10,"column_start":26,"column_end":29},"name":"inw","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":32},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,108,105,98,46,114,115],"byte_start":262,"byte_end":266,"line_start":10,"line_end":10,"column_start":31,"column_end":35},"name":"outw","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":34},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,108,105,98,46,114,115],"byte_start":268,"byte_end":271,"line_start":10,"line_end":10,"column_start":37,"column_end":40},"name":"inl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":36},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,108,105,98,46,114,115],"byte_start":273,"byte_end":277,"line_start":10,"line_end":10,"column_start":42,"column_end":46},"name":"outl","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":2320,"line_start":1,"line_end":75,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/argos/Theseus/libs/port_io/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":24},{"krate":0,"index":38},{"krate":0,"index":44},{"krate":0,"index":50},{"krate":0,"index":56},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":62}],"decl_id":null,"docs":" CPU-level input/output instructions, including `inb`, `outb`, etc., and\n a high level Rust wrapper.\n","sig":null,"attributes":[{"value":"feature(asm, const_fn)","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,108,105,98,46,114,115],"byte_start":108,"byte_end":134,"line_start":4,"line_end":4,"column_start":1,"column_end":27}},{"value":"no_std","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,108,105,98,46,114,115],"byte_start":135,"byte_end":145,"line_start":5,"line_end":5,"column_start":1,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":26},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,120,56,54,46,114,115],"byte_start":3283,"byte_end":3286,"line_start":4,"line_end":4,"column_start":15,"column_end":18},"name":"inb","qualname":"::x86::inb","value":"fn (port: u16) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Read a `u8`-sized value from `port`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":28},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,120,56,54,46,114,115],"byte_start":3599,"byte_end":3603,"line_start":13,"line_end":13,"column_start":15,"column_end":19},"name":"outb","qualname":"::x86::outb","value":"fn (value: u8, port: u16) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Write a `u8`-sized `value` to `port`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":30},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,120,56,54,46,114,115],"byte_start":3759,"byte_end":3762,"line_start":18,"line_end":18,"column_start":15,"column_end":18},"name":"inw","qualname":"::x86::inw","value":"fn (port: u16) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Read a `u16`-sized value from `port`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":32},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,120,56,54,46,114,115],"byte_start":3947,"byte_end":3951,"line_start":25,"line_end":25,"column_start":15,"column_end":19},"name":"outw","qualname":"::x86::outw","value":"fn (value: u16, port: u16) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Write a `u8`-sized `value` to `port`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":34},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,120,56,54,46,114,115],"byte_start":4108,"byte_end":4111,"line_start":30,"line_end":30,"column_start":15,"column_end":18},"name":"inl","qualname":"::x86::inl","value":"fn (port: u16) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Read a `u32`-sized value from `port`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":36},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,120,56,54,46,114,115],"byte_start":4299,"byte_end":4303,"line_start":37,"line_end":37,"column_start":15,"column_end":19},"name":"outl","qualname":"::x86::outl","value":"fn (value: u32, port: u16) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Write a `u32`-sized `value` to `port`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":38},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,108,105,98,46,114,115],"byte_start":591,"byte_end":596,"line_start":20,"line_end":20,"column_start":11,"column_end":16},"name":"InOut","qualname":"::InOut","value":"InOut","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":42}],"decl_id":null,"docs":" This trait is defined for any type which can be read or written over a\n port.  The processor supports I/O with `u8`, `u16` and `u32`.  The\n functions in this trait are all unsafe because they can write to\n arbitrary ports.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,108,105,98,46,114,115],"byte_start":659,"byte_end":666,"line_start":22,"line_end":22,"column_start":15,"column_end":22},"name":"port_in","qualname":"::InOut::port_in","value":"fn (port: u16) -> Self","parent":{"krate":0,"index":38},"children":[],"decl_id":null,"docs":" This trait is defined for any type which can be read or written over a\n port.  The processor supports I/O with `u8`, `u16` and `u32`.  The\n functions in this trait are all unsafe because they can write to\n arbitrary ports.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,108,105,98,46,114,115],"byte_start":747,"byte_end":755,"line_start":25,"line_end":25,"column_start":15,"column_end":23},"name":"port_out","qualname":"::InOut::port_out","value":"fn (port: u16, value: Self) -> ()","parent":{"krate":0,"index":38},"children":[],"decl_id":null,"docs":" This trait is defined for any type which can be read or written over a\n port.  The processor supports I/O with `u8`, `u16` and `u32`.  The\n functions in this trait are all unsafe because they can write to\n arbitrary ports.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":70},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1499,"byte_end":1503,"line_start":49,"line_end":49,"column_start":12,"column_end":16},"name":"Port","qualname":"::Port","value":"Port {  }","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":23}],"decl_id":null,"docs":" An I/O port over an arbitrary type supporting the `InOut` interface.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1781,"byte_end":1784,"line_start":60,"line_end":60,"column_start":18,"column_end":21},"name":"new","qualname":"<Port<T>>::new","value":"fn (port: u16) -> Port<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2060,"byte_end":2064,"line_start":67,"line_end":67,"column_start":12,"column_end":16},"name":"read","qualname":"<Port<T>>::read","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2249,"byte_end":2254,"line_start":72,"line_end":72,"column_start":19,"column_end":24},"name":"write","qualname":"<Port<T>>::write","value":"fn (&self, value: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":3,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1723,"byte_end":1727,"line_start":58,"line_end":58,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,112,111,114,116,95,105,111,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1723,"byte_end":1727,"line_start":58,"line_end":58,"column_start":16,"column_end":20},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":70},"to":{"krate":4294967295,"index":4294967295}}]}