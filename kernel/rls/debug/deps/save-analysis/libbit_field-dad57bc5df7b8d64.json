{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"bit_field","disambiguator":[5990267761296478981,11010043664497799908]},"crate_root":"/home/argos/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.7.0/src","external_crates":[{"file_name":"/home/argos/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.7.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[714512203731086191,2869256915080255377]}},{"file_name":"/home/argos/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.7.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9464329963319564510,7501656092555883702]}}],"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":5347,"line_start":1,"line_end":166,"column_start":1,"column_end":69}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":5347,"line_start":1,"line_end":166,"column_start":1,"column_end":69},"name":"","qualname":"::","value":"/home/argos/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.7.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":36},{"krate":0,"index":48},{"krate":0,"index":60},{"krate":0,"index":72},{"krate":0,"index":84},{"krate":0,"index":96},{"krate":0,"index":108},{"krate":0,"index":120},{"krate":0,"index":132}],"decl_id":null,"docs":" Provides the abstraction of a bit field, which allows for bit-level update and retrieval\n operations.\n","sig":null,"attributes":[{"value":"no_std","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":110,"byte_end":120,"line_start":4,"line_end":4,"column_start":1,"column_end":11}}]},{"kind":"Trait","id":{"krate":0,"index":10},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":287,"byte_end":295,"line_start":13,"line_end":13,"column_start":11,"column_end":19},"name":"BitField","qualname":"::BitField","value":"BitField","parent":null,"children":[{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20}],"decl_id":null,"docs":" A generic trait which provides methods for extracting and setting specific bits or ranges of\n bits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":535,"byte_end":545,"line_start":23,"line_end":23,"column_start":8,"column_end":18},"name":"bit_length","qualname":"::BitField::bit_length","value":"fn (&self) -> u8","parent":{"krate":0,"index":10},"children":[],"decl_id":null,"docs":" A generic trait which provides methods for extracting and setting specific bits or ranges of\n bits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1050,"byte_end":1057,"line_start":40,"line_end":40,"column_start":8,"column_end":15},"name":"get_bit","qualname":"::BitField::get_bit","value":"fn (&self, bit: u8) -> bool","parent":{"krate":0,"index":10},"children":[],"decl_id":null,"docs":" A generic trait which provides methods for extracting and setting specific bits or ranges of\n bits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1628,"byte_end":1636,"line_start":58,"line_end":58,"column_start":8,"column_end":16},"name":"get_bits","qualname":"::BitField::get_bits","value":"fn (&self, range: Range<u8>) -> Self","parent":{"krate":0,"index":10},"children":[],"decl_id":null,"docs":" A generic trait which provides methods for extracting and setting specific bits or ranges of\n bits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2375,"byte_end":2382,"line_start":82,"line_end":82,"column_start":8,"column_end":15},"name":"set_bit","qualname":"::BitField::set_bit","value":"fn (&mut self, bit: u8, value: bool) -> &mut Self","parent":{"krate":0,"index":10},"children":[],"decl_id":null,"docs":" A generic trait which provides methods for extracting and setting specific bits or ranges of\n bits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3151,"byte_end":3159,"line_start":104,"line_end":104,"column_start":8,"column_end":16},"name":"set_bits","qualname":"::BitField::set_bits","value":"fn (&mut self, range: Range<u8>, value: Self) -> &mut Self","parent":{"krate":0,"index":10},"children":[],"decl_id":null,"docs":" A generic trait which provides methods for extracting and setting specific bits or ranges of\n bits.\n","sig":null,"attributes":[]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}