{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"zero","disambiguator":[11282907022628775088,14648648374157302975]},"crate_root":"/home/argos/.cargo/git/checkouts/zero-0fbab15df8e2e76e/9fc7ff5/src","external_crates":[{"file_name":"/home/argos/.cargo/git/checkouts/zero-0fbab15df8e2e76e/9fc7ff5/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[714512203731086191,2869256915080255377]}},{"file_name":"/home/argos/.cargo/git/checkouts/zero-0fbab15df8e2e76e/9fc7ff5/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9464329963319564510,7501656092555883702]}}],"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,103,105,116,47,99,104,101,99,107,111,117,116,115,47,122,101,114,111,45,48,102,98,97,98,49,53,100,102,56,101,50,101,55,54,101,47,57,102,99,55,102,102,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":340,"byte_end":10935,"line_start":9,"line_end":339,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,103,105,116,47,99,104,101,99,107,111,117,116,115,47,122,101,114,111,45,48,102,98,97,98,49,53,100,102,56,101,50,101,55,54,101,47,57,102,99,55,102,102,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":340,"byte_end":10935,"line_start":9,"line_end":339,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/argos/.cargo/git/checkouts/zero-0fbab15df8e2e76e/9fc7ff5/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":60},{"krate":0,"index":66},{"krate":0,"index":62},{"krate":0,"index":50},{"krate":0,"index":58}],"decl_id":null,"docs":" Functions for reading binary data into Rust data structures. All functions\n are zero-allocation.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,103,105,116,47,99,104,101,99,107,111,117,116,115,47,122,101,114,111,45,48,102,98,97,98,49,53,100,102,56,101,50,101,55,54,101,47,57,102,99,55,102,102,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1387,"byte_end":1397,"line_start":29,"line_end":29,"column_start":1,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":18},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,103,105,116,47,99,104,101,99,107,111,117,116,115,47,122,101,114,111,45,48,102,98,97,98,49,53,100,102,56,101,50,101,55,54,101,47,57,102,99,55,102,102,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1591,"byte_end":1595,"line_start":38,"line_end":38,"column_start":8,"column_end":12},"name":"read","qualname":"::read","value":"fn <'a, T> (input: &'a [u8]) -> &'a T","parent":null,"children":[],"decl_id":null,"docs":" Reads a single `T` from `input`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":20},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,103,105,116,47,99,104,101,99,107,111,117,116,115,47,122,101,114,111,45,48,102,98,97,98,49,53,100,102,56,101,50,101,55,54,101,47,57,102,99,55,102,102,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2118,"byte_end":2128,"line_start":53,"line_end":53,"column_start":8,"column_end":18},"name":"read_array","qualname":"::read_array","value":"fn <'a, T> (input: &'a [u8]) -> &'a [T]","parent":null,"children":[],"decl_id":null,"docs":" Read an array of `T`s from input.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":22},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,103,105,116,47,99,104,101,99,107,111,117,116,115,47,122,101,114,111,45,48,102,98,97,98,49,53,100,102,56,101,50,101,55,54,101,47,57,102,99,55,102,102,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2630,"byte_end":2638,"line_start":67,"line_end":67,"column_start":8,"column_end":16},"name":"read_str","qualname":"::read_str","value":"fn <'a> (input: &'a [u8]) -> Result<&'a str, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Read a string from `input`. The string must be a null-termianted utf8 string.\n Note that an ascii C string fulfils this requirement.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":24},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,103,105,116,47,99,104,101,99,107,111,117,116,115,47,122,101,114,111,45,48,102,98,97,98,49,53,100,102,56,101,50,101,55,54,101,47,57,102,99,55,102,102,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3027,"byte_end":3044,"line_start":74,"line_end":74,"column_start":8,"column_end":25},"name":"read_strs_to_null","qualname":"::read_strs_to_null","value":"fn <'a> (input: &'a [u8]) -> StrReaderIterator<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which will return a sequence of strings from `input`.\n Each string must be a null-terminated utf8 string. The sequence of strings\n is terminated either by a second null byte, or the end of input.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":26},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,103,105,116,47,99,104,101,99,107,111,117,116,115,47,122,101,114,111,45,48,102,98,97,98,49,53,100,102,56,101,50,101,55,54,101,47,57,102,99,55,102,102,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4390,"byte_end":4393,"line_start":100,"line_end":100,"column_start":18,"column_end":21},"name":"Pod","qualname":"::Pod","value":"Pod: Sized","parent":null,"children":[],"decl_id":null,"docs":" Implementing this trait means that the concrete type is plain old data (POD).\n Precisely, by implementing `Pod` the programmer asserts that it is safe to\n read the type from binary slices provided to `read`, etc.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":44},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,103,105,116,47,99,104,101,99,107,111,117,116,115,47,122,101,114,111,45,48,102,98,97,98,49,53,100,102,56,101,50,101,55,54,101,47,57,102,99,55,102,102,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4679,"byte_end":4690,"line_start":112,"line_end":112,"column_start":15,"column_end":26},"name":"read_unsafe","qualname":"::read_unsafe","value":"fn <'a, T> (input: &'a [u8]) -> &'a T","parent":null,"children":[],"decl_id":null,"docs":" Reads a `T` from `input` with no checks.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,103,105,116,47,99,104,101,99,107,111,117,116,115,47,122,101,114,111,45,48,102,98,97,98,49,53,100,102,56,101,50,101,55,54,101,47,57,102,99,55,102,102,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4872,"byte_end":4889,"line_start":117,"line_end":117,"column_start":15,"column_end":32},"name":"read_array_unsafe","qualname":"::read_array_unsafe","value":"fn <'a, T> (input: &'a [u8]) -> &'a [T]","parent":null,"children":[],"decl_id":null,"docs":" Reads an array of `T`s from `input` with no checks.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":48},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,103,105,116,47,99,104,101,99,107,111,117,116,115,47,122,101,114,111,45,48,102,98,97,98,49,53,100,102,56,101,50,101,55,54,101,47,57,102,99,55,102,102,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5116,"byte_end":5131,"line_start":123,"line_end":123,"column_start":15,"column_end":30},"name":"read_str_unsafe","qualname":"::read_str_unsafe","value":"fn <'a> (input: &'a [u8]) -> Result<&'a str, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Reads a null-terminated string from `input` with no checks.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,103,105,116,47,99,104,101,99,107,111,117,116,115,47,122,101,114,111,45,48,102,98,97,98,49,53,100,102,56,101,50,101,55,54,101,47,57,102,99,55,102,102,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5403,"byte_end":5420,"line_start":130,"line_end":130,"column_start":12,"column_end":29},"name":"StrReaderIterator","qualname":"::StrReaderIterator","value":"StrReaderIterator {  }","parent":null,"children":[{"krate":0,"index":51}],"decl_id":null,"docs":" Iterates over `self.data`, yielding strings (null-terminated in `self.data`).\n See `read_strs_to_null`.\n","sig":null,"attributes":[]}],"impls":[{"id":8,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,103,105,116,47,99,104,101,99,107,111,117,116,115,47,122,101,114,111,45,48,102,98,97,98,49,53,100,102,56,101,50,101,55,54,101,47,57,102,99,55,102,102,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5471,"byte_end":5488,"line_start":134,"line_end":134,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,103,105,116,47,99,104,101,99,107,111,117,116,115,47,122,101,114,111,45,48,102,98,97,98,49,53,100,102,56,101,50,101,55,54,101,47,57,102,99,55,102,102,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4395,"byte_end":4400,"line_start":100,"line_end":100,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1780},"to":{"krate":0,"index":26}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,46,99,97,114,103,111,47,103,105,116,47,99,104,101,99,107,111,117,116,115,47,122,101,114,111,45,48,102,98,97,98,49,53,100,102,56,101,50,101,55,54,101,47,57,102,99,55,102,102,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5471,"byte_end":5488,"line_start":134,"line_end":134,"column_start":23,"column_end":40},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":60},"to":{"krate":1,"index":3830}}]}