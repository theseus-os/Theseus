{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"dfqueue","disambiguator":[13446934791676871366,6890810614827919043]},"crate_root":"/home/argos/Theseus/libs/dfqueue/src","external_crates":[{"file_name":"/home/argos/Theseus/libs/dfqueue/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[714512203731086191,2869256915080255377]}},{"file_name":"/home/argos/Theseus/libs/dfqueue/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9464329963319564510,7501656092555883702]}},{"file_name":"/home/argos/Theseus/libs/dfqueue/src/lib.rs","num":3,"id":{"name":"alloc","disambiguator":[652825573092759440,7992474085674455038]}}],"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":23424,"line_start":1,"line_end":678,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":23424,"line_start":1,"line_end":678,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/argos/Theseus/libs/dfqueue/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":62},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":70},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":76},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":94},{"krate":0,"index":108},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":114},{"krate":0,"index":118},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":132},{"krate":0,"index":140}],"decl_id":null,"docs":" DFQ is a decoupled, fault-tolerant, multi-producer single-consumer queue.\n DFQ is compatible with `no_std` and is interrupt-safe by being entirely lock-free and mostly wait-free.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1258,"byte_end":1268,"line_start":20,"line_end":20,"column_start":1,"column_end":11}},{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1270,"byte_end":1290,"line_start":22,"line_end":22,"column_start":1,"column_end":21}},{"value":"feature(alloc)","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1291,"byte_end":1309,"line_start":23,"line_end":23,"column_start":1,"column_end":19}},{"value":"feature(box_syntax)","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1310,"byte_end":1333,"line_start":24,"line_end":24,"column_start":1,"column_end":24}},{"value":"feature(optin_builtin_traits)","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1334,"byte_end":1367,"line_start":25,"line_end":25,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":22},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,109,112,115,99,95,113,117,101,117,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mpsc_queue","qualname":"::mpsc_queue","value":"/home/argos/Theseus/libs/dfqueue/src/mpsc_queue.rs","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":50},{"krate":0,"index":58}],"decl_id":null,"docs":" Ported from Rust's std::sync::mpsc::Queue.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":19},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,109,112,115,99,95,113,117,101,117,101,46,114,115],"byte_start":23688,"byte_end":23692,"line_start":13,"line_end":13,"column_start":5,"column_end":9},"name":"Data","qualname":"::mpsc_queue::PopResult::Data","value":"PopResult::Data(T)","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Some data has been popped\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":23},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,109,112,115,99,95,113,117,101,117,101,46,114,115],"byte_start":23728,"byte_end":23733,"line_start":15,"line_end":15,"column_start":5,"column_end":10},"name":"Empty","qualname":"::mpsc_queue::PopResult::Empty","value":"PopResult::Empty","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" The queue is empty\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":25},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,109,112,115,99,95,113,117,101,117,101,46,114,115],"byte_start":24035,"byte_end":24047,"line_start":20,"line_end":20,"column_start":5,"column_end":17},"name":"Inconsistent","qualname":"::mpsc_queue::PopResult::Inconsistent","value":"PopResult::Inconsistent","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" The queue is in an inconsistent state. Popping data should succeed, but\n some pushers have yet to make enough progress in order allow a pop to\n succeed. It is recommended that a pop() occur \"in the near future\" in\n order to see if the sender has made progress or not\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":36},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,109,112,115,99,95,113,117,101,117,101,46,114,115],"byte_start":23635,"byte_end":23644,"line_start":11,"line_end":11,"column_start":10,"column_end":19},"name":"PopResult","qualname":"::mpsc_queue::PopResult","value":"PopResult::{Data, Empty, Inconsistent}","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":23},{"krate":0,"index":25}],"decl_id":null,"docs":" A result of the `pop` function.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":40},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,109,112,115,99,95,113,117,101,117,101,46,114,115],"byte_start":24340,"byte_end":24349,"line_start":31,"line_end":31,"column_start":12,"column_end":21},"name":"MpscQueue","qualname":"::mpsc_queue::MpscQueue","value":"MpscQueue {  }","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":37}],"decl_id":null,"docs":" The multi-producer single-consumer structure. This is not cloneable, but it\n may be safely shared so long as it is guaranteed that there is only one\n popper at a time (many pushers are allowed).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,109,112,115,99,95,113,117,101,117,101,46,114,115],"byte_start":24848,"byte_end":24851,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"new","qualname":"<MpscQueue<T>>::new","value":"fn () -> MpscQueue<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,109,112,115,99,95,113,117,101,117,101,46,114,115],"byte_start":25092,"byte_end":25096,"line_start":60,"line_end":60,"column_start":12,"column_end":16},"name":"push","qualname":"<MpscQueue<T>>::push","value":"fn (&self, t: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,109,112,115,99,95,113,117,101,117,101,46,114,115],"byte_start":25878,"byte_end":25881,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"pop","qualname":"<MpscQueue<T>>::pop","value":"fn (&self) -> PopResult<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":144},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1751,"byte_end":1758,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"DFQueue","qualname":"::DFQueue","value":"DFQueue {  }","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":93}],"decl_id":null,"docs":" The actual queue, an opaque type that cannot be used directly. \n The user must use `DFQueueConsumer` and `DFQueueProducer`. \n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2161,"byte_end":2164,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"name":"new","qualname":"<DFQueue<T>>::new","value":"fn () -> DFQueue<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2500,"byte_end":2513,"line_start":70,"line_end":70,"column_start":12,"column_end":25},"name":"into_consumer","qualname":"<DFQueue<T>>::into_consumer","value":"fn (self) -> DFQueueConsumer<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3140,"byte_end":3153,"line_start":83,"line_end":83,"column_start":12,"column_end":25},"name":"into_producer","qualname":"<DFQueue<T>>::into_producer","value":"fn (self) -> DFQueueProducer<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":150},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3799,"byte_end":3814,"line_start":100,"line_end":100,"column_start":12,"column_end":27},"name":"DFQueueConsumer","qualname":"::DFQueueConsumer","value":"DFQueueConsumer {  }","parent":null,"children":[{"krate":0,"index":99}],"decl_id":null,"docs":" A consumer that can process (peek into) elements in a DFQueue, but not actually remove them.\n Do not wrap this in an Arc or Mutex, the queue it is already protected by those on the interior. ","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4004,"byte_end":4019,"line_start":107,"line_end":107,"column_start":12,"column_end":27},"name":"obtain_producer","qualname":"<DFQueueConsumer<T>>::obtain_producer","value":"fn (&self) -> DFQueueProducer<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4328,"byte_end":4332,"line_start":115,"line_end":115,"column_start":12,"column_end":16},"name":"peek","qualname":"<DFQueueConsumer<T>>::peek","value":"fn (&self) -> Option<PeekedData<T>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4768,"byte_end":4783,"line_start":128,"line_end":128,"column_start":12,"column_end":27},"name":"DFQueueProducer","qualname":"::DFQueueProducer","value":"DFQueueProducer {  }","parent":null,"children":[{"krate":0,"index":105}],"decl_id":null,"docs":" A producer that can enqueue elements into a DFQueue.\n Do not wrap this in an Arc or Mutex, the queue it is already protected by those on the interior. \n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5028,"byte_end":5043,"line_start":136,"line_end":136,"column_start":12,"column_end":27},"name":"obtain_producer","qualname":"<DFQueueProducer<T>>::obtain_producer","value":"fn (&self) -> DFQueueProducer<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5440,"byte_end":5452,"line_start":146,"line_end":146,"column_start":12,"column_end":24},"name":"get_consumer","qualname":"<DFQueueProducer<T>>::get_consumer","value":"fn (&self) -> Option<DFQueueConsumer<T>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6192,"byte_end":6199,"line_start":167,"line_end":167,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<DFQueueProducer<T>>::enqueue","value":"fn (&self, data: T) -> QueuedData<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":57},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7174,"byte_end":7178,"line_start":201,"line_end":201,"column_start":5,"column_end":9},"name":"Data","qualname":"::PeekResult::Data","value":"PeekResult::Data(PeekedData<T>)","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Some data has been successfully peeked\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":61},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7226,"byte_end":7231,"line_start":203,"line_end":203,"column_start":5,"column_end":10},"name":"Empty","qualname":"::PeekResult::Empty","value":"PeekResult::Empty","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" The queue is empty\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":63},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7536,"byte_end":7548,"line_start":208,"line_end":208,"column_start":5,"column_end":17},"name":"Inconsistent","qualname":"::PeekResult::Inconsistent","value":"PeekResult::Inconsistent","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" The queue is in an inconsistent state. Peeking data should succeed, but\n some pushers have yet to make enough progress in order allow a peek to\n succeed. It is recommended that a peek() occur \"in the near future\" in\n order to see if the sender has made progress or not.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":90},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7107,"byte_end":7117,"line_start":199,"line_end":199,"column_start":10,"column_end":20},"name":"PeekResult","qualname":"::PeekResult","value":"PeekResult::{Data, Empty, Inconsistent}","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":61},{"krate":0,"index":63}],"decl_id":null,"docs":" A result of the `peek` function.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":162},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8237,"byte_end":8247,"line_start":226,"line_end":226,"column_start":12,"column_end":22},"name":"QueuedData","qualname":"::QueuedData","value":"","parent":null,"children":[],"decl_id":null,"docs":" A special reference type that wraps a data item that has been queued. \n This is returned to a producer thread (the user of a DFQueueProducer)\n when enqueuing an item onto the queue so that the producer \n can retain a reference to it in the case of failure.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8761,"byte_end":8773,"line_start":240,"line_end":240,"column_start":12,"column_end":24},"name":"is_completed","qualname":"<QueuedData<T>>::is_completed","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9489,"byte_end":9500,"line_start":254,"line_end":254,"column_start":12,"column_end":23},"name":"is_enqueued","qualname":"<QueuedData<T>>::is_enqueued","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10325,"byte_end":10335,"line_start":268,"line_end":268,"column_start":12,"column_end":22},"name":"has_failed","qualname":"<QueuedData<T>>::has_failed","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":168},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11377,"byte_end":11387,"line_start":302,"line_end":302,"column_start":12,"column_end":22},"name":"PeekedData","qualname":"::PeekedData","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around data in the queue that allows a DFQueueConsumer \n to access the data and mark the queued item as completed. \n Automatically Derefs to the inner type `&T`, just like Arc does. \n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11452,"byte_end":11466,"line_start":304,"line_end":304,"column_start":12,"column_end":26},"name":"mark_completed","qualname":"<PeekedData<T>>::mark_completed","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,109,112,115,99,95,113,117,101,117,101,46,114,115],"byte_start":24454,"byte_end":24463,"line_start":36,"line_end":36,"column_start":31,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,109,112,115,99,95,113,117,101,117,101,46,114,115],"byte_start":24501,"byte_end":24510,"line_start":37,"line_end":37,"column_start":31,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,109,112,115,99,95,113,117,101,117,101,46,114,115],"byte_start":24527,"byte_end":24531,"line_start":39,"line_end":39,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,109,112,115,99,95,113,117,101,117,101,46,114,115],"byte_start":24721,"byte_end":24730,"line_start":48,"line_end":48,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,109,112,115,99,95,113,117,101,117,101,46,114,115],"byte_start":26524,"byte_end":26533,"line_start":97,"line_end":97,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1929,"byte_end":1936,"line_start":54,"line_end":54,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3858,"byte_end":3873,"line_start":104,"line_end":104,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4827,"byte_end":4842,"line_start":132,"line_end":132,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8285,"byte_end":8295,"line_start":227,"line_end":227,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11050,"byte_end":11060,"line_start":290,"line_end":290,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11425,"byte_end":11435,"line_start":303,"line_end":303,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11559,"byte_end":11569,"line_start":308,"line_end":308,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12441,"byte_end":12451,"line_start":338,"line_end":338,"column_start":31,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12489,"byte_end":12499,"line_start":339,"line_end":339,"column_start":31,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12516,"byte_end":12520,"line_start":341,"line_end":341,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12798,"byte_end":12808,"line_start":351,"line_end":351,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16049,"byte_end":16059,"line_start":423,"line_end":423,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1576,"byte_end":1586,"line_start":40,"line_end":40,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":22}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,109,112,115,99,95,113,117,101,117,101,46,114,115],"byte_start":24454,"byte_end":24463,"line_start":36,"line_end":36,"column_start":31,"column_end":40},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":40},"to":{"krate":1,"index":1774}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,109,112,115,99,95,113,117,101,117,101,46,114,115],"byte_start":24501,"byte_end":24510,"line_start":37,"line_end":37,"column_start":31,"column_end":40},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":40},"to":{"krate":1,"index":1786}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,109,112,115,99,95,113,117,101,117,101,46,114,115],"byte_start":24527,"byte_end":24531,"line_start":39,"line_end":39,"column_start":9,"column_end":13},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":38},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,109,112,115,99,95,113,117,101,117,101,46,114,115],"byte_start":24721,"byte_end":24730,"line_start":48,"line_end":48,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":40},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,109,112,115,99,95,113,117,101,117,101,46,114,115],"byte_start":26524,"byte_end":26533,"line_start":97,"line_end":97,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":40},"to":{"krate":1,"index":2040}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1929,"byte_end":1936,"line_start":54,"line_end":54,"column_start":9,"column_end":16},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":144},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3858,"byte_end":3873,"line_start":104,"line_end":104,"column_start":9,"column_end":24},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":150},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4827,"byte_end":4842,"line_start":132,"line_end":132,"column_start":9,"column_end":24},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":156},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8285,"byte_end":8295,"line_start":227,"line_end":227,"column_start":9,"column_end":19},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11050,"byte_end":11060,"line_start":290,"line_end":290,"column_start":19,"column_end":29},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":162},"to":{"krate":1,"index":2012}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11425,"byte_end":11435,"line_start":303,"line_end":303,"column_start":9,"column_end":19},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":168},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11559,"byte_end":11569,"line_start":308,"line_end":308,"column_start":19,"column_end":29},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":168},"to":{"krate":1,"index":2012}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12441,"byte_end":12451,"line_start":338,"line_end":338,"column_start":31,"column_end":41},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":180},"to":{"krate":1,"index":1774}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12489,"byte_end":12499,"line_start":339,"line_end":339,"column_start":31,"column_end":41},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":180},"to":{"krate":1,"index":1786}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12516,"byte_end":12520,"line_start":341,"line_end":341,"column_start":9,"column_end":13},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":92},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12798,"byte_end":12808,"line_start":351,"line_end":351,"column_start":9,"column_end":19},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,103,111,115,47,84,104,101,115,101,117,115,47,108,105,98,115,47,100,102,113,117,101,117,101,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16049,"byte_end":16059,"line_start":423,"line_end":423,"column_start":18,"column_end":28},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":180},"to":{"krate":1,"index":2040}}]}